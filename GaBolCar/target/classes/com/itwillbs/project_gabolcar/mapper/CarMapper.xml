<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.project_gabolcar.mapper.CarMapper">
	<insert id="registerCar">
		insert into
			car_info
		values (
			null
			, #{car_type}
			, #{car_number}
			, #{car_company}
			, #{car_model}
			, #{car_old}
			, #{car_shift_type}
			, #{car_fuel_type}
			, #{car_riding}
			, #{car_age}
			, #{car_career}
			, #{car_license}
			, #{car_weekdays}
			, #{car_weekend}
			, #{brc_name}
			, #{car_file}
			, '신규'
			, #{car_file_path}
			, now()
		)
	</insert>
	<insert id="insertCarOption" parameterType="com.itwillbs.project_gabolcar.vo.CarVO">
		insert into
			car_options
		values
		<foreach collection="option_idx" item="option" separator=",">
			(#{car_idx}, #{option})
		</foreach>
	</insert>
	
	
	<!-- pageInfo 와 map 을 받아  찾고싶은 차량의 조건들을 확인하여 리스트를 반환
		만약 pageInfo이 없으면 전체 차량 리스트를 불러옴
		map의 속성값에 따라서 차량 찾기 만약 map이 아예 없으면 조건선택 X -->
	<select id="selectCarList" resultType="map" parameterType="map">
		select
		<choose>
			<when test="map.carRes != null">
			 brc_name ,car_model
			, car_old,car_company,car_weekdays,car_weekend
			,car_riding, car_shift_type
			, car_fuel_type,car_age,car_file
			</when>
			<otherwise>			
				ci.car_idx
				, car_type
				, car_number
				, car_company
				, car_model
				, car_old
			-- 	, car_shift_type
			-- 	, car_fuel_type
			-- 	, car_riding
				, brc_name
				, car_status
			-- 	, car_riding
			-- 	, car_weekend
			-- 	, car_age
			-- 	, car_weekdays
				, group_concat(option_name SEPARATOR ', ') AS option_name 
			</otherwise>
		</choose>
		from
			car_info ci
			<!-- adm 페이지의 차량 목록에서 사용 -->
			<choose>
				<when test="map.search_type != null and map != null">
					JOIN car_options co ON ci.car_idx = co.car_idx
					JOIN option_list ol ON co.option_idx = ol.option_idx
					<choose>
						<when test="map.search_type.equals('') and map.search_keyword.equals('')">
							GROUP BY ci.car_idx
						</when>
						<when test="map.search_keyword == null">
							where car_type = #{map.search_type}
<!-- 							where car_type in ( -->
<!-- 								<foreach collection="map.search_type" item="type" separator=","> -->
<!-- 									#{type} -->
<!-- 								</foreach> -->
<!-- 								) -->
							GROUP BY ci.car_idx
						</when>
						<when test="map.search_type.equals('car_idx')">
							where ci.car_idx = #{map.search_keyword}
							GROUP BY ci.car_idx
						</when>
						<when test="map.search_type.equals('car_company')">
							where car_company like concat('%',#{map.search_keyword},'%')
							GROUP BY ci.car_idx
						</when>
						<when test="map.search_type.equals('car_model')">
							where car_model like concat('%',#{map.search_keyword},'%')
							GROUP BY ci.car_idx
						</when>
						<when test="map.search_type.equals('car_old')">
							where car_old = #{map.search_keyword}
							GROUP BY ci.car_idx
						</when>
						<when test="map.search_type.equals('brc_name')">
							where brc_name like concat('%',#{map.search_keyword},'%')
							GROUP BY ci.car_idx
						</when>
						<when test="map.search_type.equals('option_name')">
							where option_name like concat('%',#{map.search_keyword},'%')
							GROUP BY ci.car_idx
						</when>
					</choose>
				</when>
				<otherwise>
					JOIN car_options co ON ci.car_idx = co.car_idx
					JOIN option_list ol ON co.option_idx = ol.option_idx
					GROUP BY ci.car_idx
				</otherwise>
			</choose>
			<!-- ============================================== -->
			
			<!-- 차량 예약에서 차량 찾을때 쓰는 문구 -->
			<if test="map.car_search != null and map != null">
				WHERE 
			    car_status not in ("점검") -- 차량 상태
			    <if test="map.car_type != null">
					AND car_type in  -- 차종
					(
					<foreach collection="map.car_type" item="carType" 
							separator=",">
						#{carType}
					</foreach>
					)
			    </if>
			    <if test="map.car_fuel_type != null">
				    AND car_fuel_type in  -- 연료
				    (
					<foreach collection="map.car_fuel_type" item="carFuelType" 
							 separator=",">
						#{carFuelType}
					</foreach>
				    )
			    </if>
			    <if test="map.brc_rent_name != null">
				    AND brc_name = #{map.brc_rent_name} -- 차량 지점 코드
			    </if>
			    AND car_idx not in -- 아래 res_info 에 해당하는 차량들을 모조리 제외
			    (
			        SELECT car_idx
			        FROM res_info
			         
			        WHERE
			        		-- 주의 날짜 관련 데이터 넣을때 sql의 형식이 Timestamp 이면
			        		-- 자바문 에서 해당 데이터를 Timestamp로 변환해서 넣어야함!!
			        		 
			        		-- 1. 예약 리스트에서 렌트 시작일시와 종료일시 사이에 
			       			-- 사용자가 선택한 렌트 시작 일시가 있는지 확인
			       	 		(#{map.res_rental_date} BETWEEN  res_rental_date  AND res_return_date) 
			            	
			        		-- 2. 예약 리스트에서 렌트 시작일시와 종료일시 사이에 
			       			-- 사용자가 선택한 렌트 종료 일시가 있는지 확인
			        			OR (#{map.res_return_date} BETWEEN  res_rental_date  AND res_return_date)
			        			
			        		-- 3. 예약 리스트에서 렌트 시작일시, 종료일시가
			        		-- 사용자가 선택한 렌트 시작일시 와 렌트 종료일시 안에 있을경우 확인
			        		OR 
			       	 		(res_rental_date BETWEEN  #{map.res_rental_date} AND #{map.res_return_date}) 
			        			
			       	 		OR	
			       	 		(res_return_date BETWEEN  #{map.res_rental_date} AND #{map.res_return_date}) 
			        			
			        			
			        GROUP by car_idx
			    )
			</if>
			 	<!-- 차량 각 지점마다 중복된 모델,년식 있는 차량을 하나로 묶기위해
			    	group by 문 사용  
			    	
			    	주의!!!! 현재는 carRes에서만 사용하도록 test 문에 되어있고
			    	select 문과 동일한 순서로 항목들이 기입 되어있어야됨-->
			 <if test="map.carRes != null">
   				group by brc_name, car_model
   				, car_old,car_company,car_weekdays,car_weekend
  				,car_riding, car_shift_type, car_fuel_type
  				,car_age,car_file
			</if>
			
			<!-- 차량 정렬 방식 설정 -->
			<if test="map.car_order_by != null">	
				<choose>
					<when test="map.car_order_by.equals('price')">	
						order by car_weekdays, car_old desc
					</when>
					<when test="map.car_order_by.equals('populer')">
						<!-- 인기순 정렬은 먼저 차 검색 sql 문 들어오기 전에
							 먼저 인기순 차량들 검색식으로 데이터를 가져와서
							 map 으로 집어넣고 여기로 와야함 -->
						 <if test="map.car_populer_list != null">
							order by 		
							<foreach collection="map.car_populer_list" item="carModel"
								separator=",">
								car_model LIKE #{carModel.car_model}
							</foreach>	
							, car_old desc
						 </if>
					</when>
				</choose>
			</if>
			
			<if test="pageInfo != null">
			limit #{map.pageItemStart},
				#{pageInfo.pageListLimit}
			</if>	
	</select>
	
	<!-- 차량리스트 페이지의 게시물 갯수제어를 위해 만든 PageInfo의 
			끝 페이지 번호를 찾기 -->
	<select id="selectCarListCount" >
		select
			count(car_idx)
		from
			car_info
			
	</select>
	<select id="selectCar" resultType="map" parameterType="com.itwillbs.project_gabolcar.vo.CarVO">
		select
			*
		from
			car_info
			<choose>
				<when test="car_idx eq '' or car_idx eq null">
				where car_number=#{car_number}
				</when>
				<otherwise>
				where car_idx=#{car_idx}
				</otherwise>
			</choose>
	</select>
	<update id="updateCar" parameterType="map">
		update
			car_info
		set
			car_type = #{car_type},
			car_number = #{car_number},
			car_company = #{car_company},
			car_model = #{car_model},
			car_old = #{car_old},
			car_shift_type = #{car_shift_type},
			car_fuel_type = #{car_fuel_type},
			car_riding = #{car_riding},
			car_age = #{car_age},
			car_career = #{car_career},
			car_license = #{car_license},
			car_weekdays = #{car_weekdays},
			car_weekend = #{car_weekend},
			brc_name = #{brc_name},
<!-- 			car_image_url = #{car_image_url}, -->
			car_status = #{car_status}
		where
			car_idx=#{car_idx}
	</update>
	<delete id="deleteCar" parameterType="int">
		delete from
			car_info
		where
			car_idx=#{car_idx}
	</delete>
    <insert id="registerOption" parameterType="String">
        insert into
            option_list
        values(
            null
            , #{option_name}
            , #{option_image_url}    
        )
    </insert>
   	<select id="selectOptionList" resultType="map">
		select
			*
		from
			option_list
	</select>
	<select id="selectOption" resultType="map">
		select
			*
		from
			option_list
		where
			option_idx = #{option_idx}
	</select>
	<update id="deleteOptionFile" parameterType="int">
		update
			option_list
		set
			option_image_url = ''
		where
			option_idx = #{option_idx}
	</update>
	<update id="updateOption" parameterType="map">
		update
			option_list
		set
			<choose>
				<when test="#{option_image_url} == null">
					option_name = #{option_name}
				</when>
				<otherwise>
					option_name = #{option_name} 
					, option_image_url = #{option_image_url}
				</otherwise>
			</choose>
		where
			option_idx = #{option_idx}
	</update>
	<delete id="deleteOption" parameterType="int">
		delete from
			option_list
		where
			option_idx = #{option_idx }
	</delete>
	
	
	<!-- 더미데이터 만들때 사용 -->
	<select id="selectCarIdxList" resultType="int">
		select
			car_idx
		from
			car_info
	</select>
</mapper>
